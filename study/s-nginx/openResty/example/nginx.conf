events {
  worker_connections 1024;
}


http {
  include mime.types;
  default_type application/octet-stream;

  lua_shared_dict my_limit_count_store 100m;

  init_by_lua_block {
    require "resty.core"
  }

  init_worker_by_lua_block {
    local uuid = require 'resty.jit-uuid';
    uuid.seed();
  }

  server {
    location /lua {
      default_type "applictaion/json";
      content_by_lua "ngx.say('hello gtlx')";
    }

    location /uuid {
      content_by_lua_block {
        local uuid = require 'resty.jit-uuid';
        ngx.say(uuid());
      }
    }
    location /hello {
      access_by_lua_block {
        local limit_count = require "resty.limit.count"

        -- rate: 10/min 
        local lim, err = limit_count.new("my_limit_count_store", 1, 5)
        if not lim then
            ngx.log(ngx.ERR, "failed to instantiate a resty.limit.count object: ", err)
            return ngx.exit(500)
        end

        local key = ngx.var.binary_remote_addr
        local delay, err = lim:incoming(key, true)
        -- 如果请求数在限制范围内，则当前请求被处理的延迟（这种场景下始终为0，因为要么被处理要么被拒绝）和将被处理的请求的剩余数
        if not delay then
            if err == "rejected" then
                return ngx.exit(503)
            end

            ngx.log(ngx.ERR, "failed to limit count: ", err)
            return ngx.exit(500)
        end
      }
      content_by_lua "ngx.say('hello hello world pass!!!!')";
    }

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path /var/run/openresty/nginx-proxy;
    fastcgi_temp_path /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path /var/run/openresty/nginx-uwsgi;
    scgi_temp_path /var/run/openresty/nginx-scgi;

    sendfile on;
    keepalive_timeout 65;
  }
}